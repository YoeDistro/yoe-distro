MACHINE = "p3737-0000-p3701-0005"
DISTRO = "yoe"
# "yoe-<libc>-<init-system>-<windowing-system>"
YOE_PROFILE = "yoe-glibc-systemd-wayland"

# Freeescale stuff EULA yeah :(
ACCEPT_FSL_EULA = "1"

# Acknowledge that Synaptics can revoke their license at any time on the
# Rapsberry pi firmware
LICENSE_FLAGS_ACCEPTED:append = "commercial_ffmpeg"

# Include the tegra_flash components to the image class 
IMAGE_CLASSES:append = " image_types_tegra"
IMAGE_FSTYPES:append = " ext4.xz"
IMAGE_FSTYPES:remove = "ext4 wic.*"

# Yoe Updater Supported Machines ( RPI, beaglebone, C4, SAMA5D27 for now )
#INITRAMFS_IMAGE_BUNDLE = "1"
# Use yoe-initramfs-image for initramfs
#INITRAMFS_IMAGE = "yoe-initramfs-image"
# Use kernel+initramfs image to boot
#IMAGE_BOOT_FILES:remove = "${KERNEL_IMAGETYPE}"
#IMAGE_BOOT_FILES:append = " ${KERNEL_IMAGETYPE}-initramfs-${MACHINE}.bin;${KERNEL_IMAGETYPE}"
# Use default Device Tree
#IMAGE_BOOT_FILES:append = " tegra234-p3767-0003-p3768-0000-a0.dtb"

#WKS_FILE:yoe = "yoe-sdimage.wks"
#WKS_FILE:yoe:pn-yoe-installer-image = "yoe-installer.wks.in"

#SWupdate
IMAGE_INSTALL:append = " swupdate"
USE_REDUNDANT_FLASH_LAYOUT = "1"
IMAGE_FSTYPES:append = " tar.gz"

# Use GNU objcopy for kernel with clang
OBJCOPY:pn-linux-tegra:toolchain-clang = "${HOST_PREFIX}objcopy"
OBJCOPY:pn-linux-jammy-nvidia-tegra:toolchain-clang = "${HOST_PREFIX}objcopy"

# Use tegra-udrm-gbm for now - https://github.com/OE4T/meta-tegra/issues/1613#issuecomment-2221113973
#PREFERRED_RPROVIDER_tegra-gbm-backend ?= "tegra-udrm-gbm"

PREFERRED_PROVIDER_virtual/kernel = "linux-yocto"

# Use gcc for the following recipes on jetson
#TOOLCHAIN:pn-edk2-firmware-tegra = "gcc"
#TOOLCHAIN:pn-optee-os-tadevkit = "gcc"
#TOOLCHAIN:pn-optee-nvsamples = "gcc"
#TOOLCHAIN:pn-optee-os = "gcc"
#TOOLCHAIN:pn-libgcc-for-nvcc = "gcc"
#TOOLCHAIN:pn-gcc-for-nvcc-runtime = "gcc"
#TOOLCHAIN:pn-opencv = "gcc"
#TOOLCHAIN:pn-efivar = "gcc"
#TOOLCHAIN:pn-qwt = "gcc"

# Use gnu run time to keep cuda happy
RUNTIME = "gnu"
TC_CXX_RUNTIME = "gnu"
CORE_IMAGE_EXTRA_INSTALL1:append = " \
  nvidia-drm-loadconf \
  cuda-libraries \
  ${@bb.utils.contains('DISTRO_FEATURES', 'x11', 'vulkan-tools tegra-mmapi-samples mesa-demos l4t-graphics-demos-x11 nvgstapps argus-samples', '', d)} \
  ${@bb.utils.contains('DISTRO_FEATURES', 'wayland', 'vulkan-tools l4t-graphics-demos-wayland weston-examples', '', d)} \
  tensorrt-samples \
  tegra-tools-tegrastats \
  optee-nvsamples optee-test \
  cuda-samples \
  python3-opencv \
  python3-cuda \
  "

DISTRO_FEATURES:remove = "ld-is-lld"

DISPLAY_CARD = "/dev/dri/card1"

# Needed for Running bitbake -ctestimage <image>
#TEST_TARGET_IP = "10.0.0.36"
#TEST_SERVER_IP = "10.0.0.13"
#TEST_TARGET = "simpleremote"

#####################################################################
# add project specific configuration below this line
#####################################################################
#require conf/distro/include/lto.inc
#DISTRO_FEATURES:append = " lto"
# set max loadavg equal to nr of cpus, same at 1.0 on 1 cpu machine
#PARALLEL_MAKE:append = " \
#-l ${@int(os.sysconf(os.sysconf_names['SC_NPROCESSORS_ONLN'])) * 150/100} \
#"

# Setting a user/password in system
#INHERIT += "extrausers"
#EXTRA_USERS_PARAMS += "\
#    useradd admin; \
#    usermod -p '$(openssl passwd -6 myrootpassword)' admin; \
#    usermod -a -G adm admin; \
#    usermod -a -G video admin; \
#    usermod -a -G audio admin; \
#    usermod -a -G systemd-journal admin; \
#"
#EXTRA_IMAGE_FEATURES:remove = "allow-empty-password empty-root-password allow-root-login post-install-logging"

# For running oe-selftest uncomment below lines
#USER_CLASSES:remove = "buildhistory"
#PRSERV_HOST = ""
